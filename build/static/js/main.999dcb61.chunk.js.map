{"version":3,"sources":["component/ContactList/ContactList.module.css","component/Filter/Filter.module.css","redux/contact-actions.js","component/ContactForm/ContactForm.js","component/ContactList/ContactList.js","component/Filter/Filter.js","App.js","redux/contact-reducer.js","redux/store.js","index.js","component/ContactForm/ContactForm.module.css"],"names":["module","exports","contactsChange","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","filterContact","connect","dispatch","onAddSubmit","contactActions","useState","setName","setNumber","nameInputId","numberInputId","handleChange","event","currentTarget","value","reset","className","style","ContactForm","onSubmit","e","preventDefault","ContactLabel","htmlFor","ContactInput","type","pattern","title","required","onChange","ContactBtn","getFilteredContacts","allContacts","filter","normalizedFilter","toLowerCase","contact","includes","contacts","items","onDeleteContact","ContactListUl","map","ContactListLi","ContactBtnDel","onClick","state","target","styles","filterLabel","App","createReducer","actionsAll","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","contactReducer","devTools","process","storeFin","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.999dcb61.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactListLi\":\"ContactList_ContactListLi__3ERE9\",\"ContactBtnDel\":\"ContactList_ContactBtnDel__CyqGx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"Filter_filterLabel__3Dxqu\"};","// import contactTypes from \"./contact-types\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContact = createAction('contact/add',  ( name, number ) => {\r\n    return {\r\n        payload: {\r\n        id: uuidv4(),\r\n        name,\r\n        number,\r\n        }\r\n    }\r\n})\r\n\r\nconst deleteContact = createAction('contact/delete');\r\n\r\nconst filterContact = createAction('contact/filter');\r\n\r\nconst contactsChange = {\r\n    addContact,\r\n    deleteContact,\r\n    filterContact\r\n}\r\n\r\nexport default contactsChange;\r\n\r\n// const addContact = ( name, number ) => ({\r\n//     type: contactTypes.ADD,\r\n//     payload: {\r\n//         id: uuidv4(),\r\n//         name,\r\n//         number,\r\n//         }\r\n//     }\r\n// )\r\n\r\n// const deleteContact = contactId => ({\r\n//     type: contactTypes.DELETE,\r\n//     payload: contactId,\r\n// })\r\n\r\n// const filterContact = value => ({\r\n//     type: contactTypes.FILTER,\r\n//     payload: value,\r\n// })\r\n","import React, { useState } from 'react'\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport style from './ContactForm.module.css'\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport contactActions from '../../redux/contact-actions';\r\n\r\nconst ContactForm = ({ onAddSubmit }) => {\r\n\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    \r\n    const nameInputId = uuidv4();\r\n    const numberInputId = uuidv4();\r\n\r\n    \r\n    const handleChange = event => {\r\n        const { name, value } = event.currentTarget;\r\n\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n    \r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        onAddSubmit(name, number);\r\n        return reset();\r\n    };\r\n\r\n    const reset = () => {\r\n        setNumber(\"\");\r\n        setName(\"\")\r\n    }\r\n    return (\r\n        <form className={style.ContactForm} onSubmit={handleSubmit}>\r\n            <label className={style.ContactLabel} htmlFor={nameInputId}>\r\n                Имя\r\n                <input\r\n                    className={style.ContactInput}\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\" required\r\n                    // required\r\n                    id={nameInputId}\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                />\r\n            </label>\r\n            <label htmlFor={numberInputId} className={style.ContactLabel}>\r\n                Номер\r\n                <input\r\n                    className={style.ContactInput}\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    value={number}\r\n                    onChange={handleChange}\r\n                    id={numberInputId} />\r\n            </label>\r\n\r\n            <button\r\n                className={style.ContactBtn}\r\n                type=\"submit\">Add contact</button>\r\n        </form>\r\n    );\r\n}\r\n    ContactForm.propTypes = {\r\n        name: PropTypes.string,\r\n        number: PropTypes.number,\r\n};\r\n    \r\nconst mapDispatchToProps = dispatch => ({\r\n    onAddSubmit: (name, number) => dispatch(contactActions.addContact(name, number)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm)\r\n//     state = {\r\n//         number: \"\",\r\n//         name: \"\",\r\n//     }\r\n\r\n//     nameInputId = uuidv4();\r\n//     numberInputId = uuidv4();\r\n\r\n//     handleChange = e => {\r\n//         const { name, value } = e.currentTarget;\r\n//         this.setState({ [name]: value });\r\n//     };\r\n\r\n//     handleSubmit = e => {\r\n//         e.preventDefault();\r\n//         this.props.onSubmit(this.state.name, this.state.number)\r\n//         this.reset();\r\n//     };\r\n\r\n//     reset = () => {\r\n//         this.setState({name: \"\", number: \"\"})\r\n//     }\r\n//     render() {\r\n//         return (\r\n//             <form className={style.ContactForm} onSubmit={this.handleSubmit}>\r\n//                 <label className={style.ContactLabel} htmlFor={this.nameInputId}>\r\n//                     Имя\r\n//                     <input\r\n//                         className={style.ContactInput}\r\n//                         type=\"text\"\r\n//                         name=\"name\"\r\n//                         pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//                         title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"required\r\n//                         // required\r\n//                         id={this.nameInputId}\r\n//                         value={this.state.name}\r\n//                         onChange={this.handleChange}\r\n//                     />\r\n//                 </label>\r\n//                 <label htmlFor={this.numberInputId} className={style.ContactLabel}>\r\n//                     Номер\r\n//                     <input\r\n//                         className={style.ContactInput}\r\n//                         type=\"tel\"\r\n//                         name=\"number\"\r\n//                         pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//                         title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//                         required\r\n//                         value={this.state.number}\r\n//                         onChange={this.handleChange}\r\n//                         id={this.numberInputId}/>\r\n//                 </label>\r\n\r\n//                 <button \r\n//                     className={style.ContactBtn}\r\n//                     type=\"submit\">Add contact</button>\r\n//             </form>\r\n//         );\r\n//     }   \r\n// }\r\n\r\n// export default ContactForm;","import React from 'react'\r\nimport style from './ContactList.module.css'\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport contactActions from '../../redux/contact-actions';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n    <ul className={style.ContactListUl}>\r\n        {contacts.map(({ id, name, number }) => (\r\n            <li className={style.ContactListLi} key={id}>\r\n                <p>{name}: \r\n                    <span>{number}</span>\r\n                </p> \r\n                <button \r\n                    className={style.ContactBtnDel}\r\n                    onClick={()=>onDeleteContact(id)}>Delete</button>  \r\n            </li>\r\n        ))}\r\n    </ul>\r\n)\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.array.isRequired,\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nconst getFilteredContacts = (allContacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return allContacts.filter(contact =>\r\n        contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  }\r\n\r\n// const mapStateToProps = (state) => {\r\n//     const { filter, items } = state.contacts;\r\n//     const newFilteredContacts = getFilteredContacts(items, filter);\r\n//     return {\r\n//         contacts: newFilteredContacts,\r\n//     }  \r\n// }\r\n//составляем пропсы, происходит операция фильтров\r\nconst mapStateToProps = ({contacts: {items,filter}}) => ({\r\n    contacts: getFilteredContacts(items, filter)\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onDeleteContact: (id) => dispatch(contactActions.deleteContact(id)),\r\n    \r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport contactActions from '../../redux/contact-actions';\r\nimport styles from './Filter.module.css'\r\nconst Filter = ({ value, onChange }) => (\r\n    \r\n    <label className={styles.filterLabel}>\r\n          Find contacts by name\r\n          <input \r\n            type=\"text\" \r\n            value={value}\r\n            onChange={onChange}\r\n            className=\"filterInput\"/>\r\n    </label>\r\n)\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    value: state.contacts.filter\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: (e) => dispatch(\r\n        contactActions.filterContact(e.target.value))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\n\r\n","// import React, { useState,useEffect } from 'react';\n// import { v4 as uuidv4 } from 'uuid';\nimport ContactForm from './component/ContactForm/ContactForm';\nimport ContactList from './component/ContactList';\nimport Filter from './component/Filter/Filter';\nimport './App.css'\n// const initialContacts = [\n//   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n// ];\n\nexport default function App() {\n  return (\n        <div className=\"divApp\">\n        <h1>Phonebook</h1>\n          <ContactForm  />\n          <h2>Contacts</h2>\n          <ContactList />\n          <Filter />\n      </div>\n    )\n}\n  // const [contacts, ] = useState(() => {\n  //   return JSON.parse(window.localStorage.getItem('contacts')) ?? initialContacts\n  // });\n\n  // // const [filter, setFilter] = useState('');\n\n  // useEffect(() => {\n  //   window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  // }, [contacts]);\n\n  // const changeFilter = e => {\n  //   setFilter(e.currentTarget.value);\n  // }\n  \n  // const addContact = (name, number) => {\n  //   const contact = {\n  //     id: uuidv4(),\n  //     name,\n  //     number,\n  //   };\n\n  //   if (!contacts.map(contact => contact.name).includes(name)) {\n  //     setContacts(prevState => [contact, ...prevState]);\n  //   }\n  // else {\n  //     alert(`${name} is already in contacs.`)\n  //   }\n  // };\n\n  // const getFilteredContacts = () => {\n  //   const normalizedFilter = filter.toLowerCase();\n  // return contacts.filter(contact =>\n  //   contact.name.toLowerCase().includes(normalizedFilter),\n  //   );\n  // }\n\n  // const deleteContact = contactId => {\n  //   setContacts(prevContacts=> prevContacts.filter(contact=>contact.id !==contactId))\n  // }\n  \n  \n// class App extends Component {\n//   state = {\n//   contacts: [\n//     {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\n//     {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n//     {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n//     {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\n//   ],\n//   filter: '',\n// }\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const parsedContacts = JSON.parse(contacts);\n    \n//     if (parsedContacts) {\n//       this.setState({ contacts: parsedContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.constacts) {\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }  \n  \n//   changeFilter = e => {\n//     this.setState({filter: e.currentTarget.value});\n// }\n  \n//   addContact = (name, number) => {\n//     const contact = {\n//       id: uuidv4(),\n//       name,\n//       number,\n//     };\n\n// if (!this.state.contacts.map(contact => contact.name).includes(name)) {\n\n//     this.setState(({contacts}) => ({\n//       contacts: [contact, ...contacts],\n//     }));\n//   }\n//   else {\n//       alert(`${name} is already in contacs.`)\n//     }\n//   };\n  \n//   handleNameChange = event => {\n//     this.setState({name: event.currentTarget.value})\n//   }\n\n//   // formSubmitHandler = data => {\n//   //   console.log(data);\n//   // }\n\n//   getFilteredContacts = () => {\n//     const {filter, contacts} = this.state;\n//     const normalizedFilter = filter.toLowerCase();\n//   return contacts.filter(contact =>\n//     contact.name.toLowerCase().includes(normalizedFilter),\n//     );\n//   }\n\n//   deleteContact = contactId => {\n//     this.setState(prevState=> ({\n//       contacts: prevState.contacts.filter(contact=>contact.id !==contactId)\n//     }))\n//   }\n  \n//   render() {\n//     const { filter } = this.state;\n//     const filteredContacts = this.getFilteredContacts();\n\n//     return (\n//         <>\n//         <h1>Phonebook</h1>\n//           <ContactForm onSubmit={this.addContact} />\n//           <h2>Contacts</h2>\n//           <ContactList contacts={filteredContacts} onDeleteContact={this.deleteContact}/>\n//           <Filter value={filter} onChange={this.changeFilter}/>\n//       </>\n//     )\n//   }\n// }\n\n// export default App;\n","import { combineReducers } from \"redux\";\r\n// import contactTypes from \"./contact-types\";\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actionsAll from './contact-actions'\r\n\r\nconst items = createReducer([], {\r\n    [actionsAll.addContact]: (state, {payload}) =>\r\n        [...state, payload],\r\n    [actionsAll.deleteContact]: (state, {payload}) =>\r\n        state.filter(({ id }) => id !== payload),        \r\n})\r\n\r\nconst filter = createReducer('', {\r\n    [actionsAll.filterContact]: (_, {payload}) => payload,   \r\n})\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n})\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//     switch (type) {\r\n//         case contactTypes.ADD:\r\n//             return [...state, payload];\r\n//         case contactTypes.DELETE:\r\n//             return state.filter(({ id }) => id !== payload);\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//     switch (type) {\r\n//         case 'contact/filter':\r\n//             return payload;\r\n//         default:\r\n//             return state;\r\n//     }\r\n// }","// import {  combineReducers } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { configureStore, getDefaultMiddleware  } from '@reduxjs/toolkit';\r\nimport contactReducer from './contact-reducer';\r\nimport logger  from 'redux-logger';\r\nimport {\r\n    persistStore,\r\n    persistReducer, \r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER\r\n} from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\n// const persistConfig = {\r\n//   key: 'contacts',\r\n//   storage,\r\n// }\r\nconst contactsPersistConfig = {\r\n    key: 'contacts',\r\n    storage,\r\n    blacklist: ['filter'],\r\n}\r\n\r\n// const rootReducer = combineReducers({\r\n//     contacts: persistReducer(persistConfig, contactReducer),\r\n// })\r\n\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\r\nconst middleware = [...getDefaultMiddleware({\r\n    serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n}), logger,];\r\n// Используем редюсер-болванку\r\n// const rootReducer = combineReducers({\r\n//     contacts: contactReducer,\r\n// })\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: persistReducer(contactsPersistConfig, contactReducer),\r\n    },\r\n    middleware,\r\n    devTools: process.env.NODE_ENV==='development',\r\n})\r\n\r\nconst persistor = persistStore(store);\r\nconst storeFin ={store, persistor}\r\n\r\nexport default storeFin;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n// import { myAction } from './redux/actions';\nimport 'modern-normalize/modern-normalize.css';\nimport { PersistGate } from 'redux-persist/integration/react';\n\n// console.log(store);\n// console.log(store.getState());\n// store.dispatch(myAction);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={'Loading...'} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__tjoXX\",\"ContactLabel\":\"ContactForm_ContactLabel__2vuae\",\"ContactInput\":\"ContactForm_ContactInput__1LU14\",\"ContactBtn\":\"ContactForm_ContactBtn__3QmLr\"};"],"sourceRoot":""}